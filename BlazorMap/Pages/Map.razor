@page "/Map"
@using BlazorMap.Services
@using BlazorMap.Models

<h1>Map</h1>

<p>
    <label for="name">Name</label>
    <input id="name" type="text" @bind="@feature.Name" />
    <button @onclick="AddFeature">Add</button>
</p>
<p>
    <label for="lat">Lat</label>
    <input id="lat" type="text" @bind="@feature.Lat" />
    <label for="lon">Lon</label>
    <input id="lon" type="text" @bind="@feature.Lon" />
    <label for="direction">Direction</label>
    <input id="direction" type="text" @bind="@feature.Direction" />
    <label for="centerView">Center View</label>
    <input id="centerView" type="checkbox" @bind="@centerView" />
    <button @onclick="UpdateFeatureLocation">Update location</button>

</p>
<button @onclick="RemoveFeature">Remove</button>
<button @onclick="UpdateFeature">Update</button>

<div id="map" class="map"><div id="popup"></div></div>

<div>@feature?.Name</div>
<div>@feature?.Id</div>
<div>@property</div>


@code{
    [Inject] MapService MapService { get; set; }

    internal bool centerView;
    internal Layer layer;
    internal Feature feature;
    internal string property;

    protected override Task OnInitializedAsync()
    {
        feature = new Feature
        {
            Name = "Ella2",
            Lon = 5.5235,
            Lat = 60.0457,
        };

        MapService.SetOnPointClickAction(OnPointClick);
        return base.OnInitializedAsync();
    }

    private void OnPointClick(Feature feature)
    {
        this.feature = feature;

        property = feature.Properties["Length"];

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var args = new InitializeMapArgs
        {
            Lon = 5.5235,
            Lat = 60.0457,
            Zoom = 8,
            TileLayers = new List<TileLayer>
            {
                new TileLayer{ Source = new OSM{ Url = @"https://{a-c}.tile.thunderforest.com/cycle/{z}/{x}/{y}.png?apikey=" + "your api key"}},
                new TileLayer{ Source = new OSM{ Url = "https://tiles.openseamap.org/seamark/{z}/{x}/{y}.png", Opaque = false}},
            }
        };

        if (firstRender)
        {
            await MapService.Initialize(args);

            layer = await MapService.AddLayer(new AddLayerArgs());
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    internal async Task AddFeature()
    {
        var args = new AddIconFeatureArgs
        {
            Name = feature.Name,
            Lon = feature.Lon,
            Lat = feature.Lat,
            ImageSource = "data/sailboat.png",
            LayerId = layer.Id
        };

        args.Properties.Add("Length", "343");
        args.Properties.Add("MMSI", "257624090");

        feature = await MapService.AddIconFeature(args);
    }

    internal async Task RemoveFeature()
    {
        var args = new RemoveFeatureArgs(feature.LayerId, feature.Id);

        await MapService.RemoveFeature(args);

        feature = new Feature();
    }

    internal async Task UpdateFeature()
    {
        var args = new UpdateFeaturePropertiesArgs(feature.LayerId, feature.Id)
        {
            Properties = feature.Properties
        };

        args.Properties["Length"] = "7";

        await MapService.UpdateFeatureProperties(args);
    }

    internal async Task UpdateFeatureLocation()
    {
        var args = new UpdateFeatureLocationArgs(feature.LayerId, feature.Id)
        {
            Lon = feature.Lon,
            Lat = feature.Lat,
            Direction = feature.Direction,
            CenterView = centerView
        };

        await MapService.UpdateFeatureLocation(args);
    }
}